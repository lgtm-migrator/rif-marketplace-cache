name: RIF Marketplace CACHE deploy

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-**'
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  deploy-staging:
    name: RIF Marketplace CACHE - Staging
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node 14
      uses: actions/setup-node@v1
      with:
        node-version: '14'

    - uses: actions/cache@v2
      id: cache
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        npm ci --only=production

    - name: "Dependency check"
      run:

        command: npx tasegir dep-check

    - name: "Code linting"
      run:
        command: npx tasegir lint

    - name: "Types check"
      run:
        command: npx tasegir types-check

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.STAGING_AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-ecr-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Login to EC2 instance
      run: |
        # aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION }} --paths "/*"
        # cd to repo
        # git checkout
        # docker pull
        # docker-compose build && docker-compose down &6 docvker-compose up -d

